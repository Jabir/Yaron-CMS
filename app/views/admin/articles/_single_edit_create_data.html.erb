<%
  only_movies = false unless only_movies
  use_dnd = false unless use_dnd
%>
<script type="text/javascript" charset="utf-8">
  var author_store;

  function load_custom_stores () {
    var author_store_data = new Array();
    <% User.find(:all).each do |user| %>
      author_store_data[author_store_data.length] = [<%= user.id.to_s %>, "<%= h user.name.gsub(/\"/,"\\") %>"];
    <% end %>

    author_store = new Ext.data.ArrayStore({
      fields: ['author_id', 'name'],
      data: author_store_data
    });
  }

  function modify_main_menu(menu) {
    var new_menu = [];
    $.each(menu,
      function (index,item) {
  			if (!(/right/.test(item.id))) {
          new_menu[new_menu.length] = item;
        }
      }
    );
    return new_menu;
  }

  function extjs_sidebar_items () {
    return sidebar_drag_view();
  }

  function asset_delete (ref) {
    var asset = ref.parentNode.parentNode;
    asset.parentNode.removeChild(asset);
  }

  ImageDragZone = function(view, config){
      this.view = view;
      ImageDragZone.superclass.constructor.call(this, view.getEl(), config);
  };
  
  Ext.extend(ImageDragZone, Ext.dd.DragZone, {
      // We don't want to register our image elements, so let's 
      // override the default registry lookup to fetch the image 
      // from the event instead
      getDragData : function(e){
          var target = e.getTarget('.thumb-wrap');
          if (target){
              var view = this.view;
              if (!view.isSelected(target)){
                  view.onClick(e);
              }
              var selNodes = view.getSelectedNodes();
              var dragData = {
                  nodes: selNodes
              };
              if (selNodes.length == 1){
                  dragData.ddel = target;
                  dragData.single = true;
              } else {
                  var div = document.createElement('div'); // create the multi element drag "ghost"
                  div.className = 'multi-proxy';
                  for(var i = 0, len = selNodes.length; i < len; i++){
                      div.appendChild(selNodes[i].cloneNode(true)); // image nodes only
                      if((i+1) % 3 == 0){
                          div.appendChild(document.createElement('br'));
                      }
                  }
                  var count = document.createElement('div'); // selected image count
                  count.innerHTML = i + ' images selected';
                  div.appendChild(count);

                  dragData.ddel = div;
                  dragData.multi = true;
              }
              return dragData;
          }
          return false;
      },

      // the default action is to "highlight" after a bad drop
      // but since an image can't be highlighted, let's frame it 
      afterRepair:function(){
          for(var i = 0, len = this.dragData.nodes.length; i < len; i++){
              Ext.fly(this.dragData.nodes[i]).frame('#8db2e3', 1);
          }
          this.dragging = false;    
      },

      // override the default repairXY with one offset for the margins and padding
      getRepairXY : function(e){
          if(!this.dragData.multi){
              var xy = Ext.Element.fly(this.dragData.ddel).getXY();
              xy[0]+=3;xy[1]+=3;
              return xy;
          }
          return false;
      }
  });
  
  Ext.DataView.DragSelector = function(cfg){
      cfg = cfg || {};
      var view, proxy, tracker;
      var rs, bodyRegion, dragRegion = new Ext.lib.Region(0,0,0,0);
      var dragSafe = cfg.dragSafe === true;

      this.init = function(dataView){
          view = dataView;
          view.on('render', onRender);
      };

      function fillRegions(){
          rs = [];
          view.all.each(function(el){
              rs[rs.length] = el.getRegion();
          });
          bodyRegion = view.el.getRegion();
      }

      function cancelClick(){
          return false;
      }

      function onBeforeStart(e){
          return !dragSafe || e.target == view.el.dom;
      }

      function onStart(e){
          view.on('containerclick', cancelClick, view, {single:true});
          if(!proxy){
              proxy = view.el.createChild({cls:'x-view-selector'});
          }else{
              if(proxy.dom.parentNode !== view.el.dom){
                  view.el.dom.appendChild(proxy.dom);
              }
              proxy.setDisplayed('block');
          }
          fillRegions();
          view.clearSelections();
      }

      function onDrag(e){
          var startXY = tracker.startXY;
          var xy = tracker.getXY();

          var x = Math.min(startXY[0], xy[0]);
          var y = Math.min(startXY[1], xy[1]);
          var w = Math.abs(startXY[0] - xy[0]);
          var h = Math.abs(startXY[1] - xy[1]);

          dragRegion.left = x;
          dragRegion.top = y;
          dragRegion.right = x+w;
          dragRegion.bottom = y+h;

          dragRegion.constrainTo(bodyRegion);
          proxy.setRegion(dragRegion);

          for(var i = 0, len = rs.length; i < len; i++){
              var r = rs[i], sel = dragRegion.intersect(r);
              if(sel && !r.selected){
                  r.selected = true;
                  view.select(i, true);
              }else if(!sel && r.selected){
                  r.selected = false;
                  view.deselect(i);
              }
          }
      }

      function onEnd(e){
          if (!Ext.isIE) {
              view.un('containerclick', cancelClick, view);    
          }        
          if(proxy){
              proxy.setDisplayed(false);
          }
      }

      function onRender(view){
          tracker = new Ext.dd.DragTracker({
              onBeforeStart: onBeforeStart,
              onStart: onStart,
              onDrag: onDrag,
              onEnd: onEnd
          });
          tracker.initEl(view.el);
      }
  };
  Ext.onReady(function(){
    var dragZone = new ImageDragZone(sidebar_drag_assets(), { containerScroll:true, ddGroup: 'organizerDD'});
  });

  var select_insert_image_instance = false;
  var select_window = false;
  function select_insert_image(ref) {
    select_insert_image_instance = ref;
    select_window = new Ext.Window({
      layout: 'fit',
      width: 354,
      title: 'Asset invoegen',
      height: 344,
      modal: true,
      shadow: true,
      plain: true,
      border: false,
      closeAction: 'close',
      items: select_insert_image_view(),
    });
    select_window.show(this);
  }
  function select_insert_image_view () {
    var select_asset_store = new Ext.data.XmlStore({
        proxy : new Ext.data.HttpProxy({
            method: 'GET',
            prettyUrls: false,
            url: '<%= url_for admin_assets_url(@site) %>.xml'
        }),
        autoLoad: {params:{start: 0, limit: 18}},
        root: 'record',
        record: 'record',
        id:'title',
        totalRecords: 'results',
        fields: ['id', 'title', 'data_content_typ', 'data_file_name', 'thumb_url', 'css_class', 'normal_url']
    });

    var select_assets_paging = new Ext.PagingToolbar({
        pageSize: 18,
        store: select_asset_store
    });
    return {
			border: true,
			id: 'sb',
			layout: 'fit',
			bodyStyle: 'padding: 0px; overflow: visible;',
			items: new Ext.DataView({
        itemSelector: 'div.thumb-wrap',
        style: 'margin: 0px; padding-top: 5px; overflow:auto;',
        multiSelect: true,
        border: false,
        store: select_asset_store,
        tpl: new Ext.XTemplate(
            '<tpl for=".">',
            '<div class="thumb-wrap" url="{normal_url}" id="asset_{id}" style="cursor: pointer">',
            '<div class="thumb thumb_for_{css_class}"><span class="{css_class}"></span><img src="{thumb_url}" class="thumb-img"></div>',
            '<span>{title}</span></div>',
            '</tpl>'
        ),
        listeners: {
        	click: function(dataView,idx, node, e) {
        	  select_insert_image_instance.insertImage(node);
        	  select_window.close();
        	},
        	scope: this
        }
      }),
      bbar: select_assets_paging
		}
  }
</script>
<% content_for :sidebar do -%>
<% end -%>