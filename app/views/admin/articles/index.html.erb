<%= render :partial => "/admin/assets/sidebar", :locals => { :use_dnd => true, :site => @site } %>
<script type="text/javascript" charset="utf-8">
  var win;
  function extjs_body_items() {
    load_custom_stores();

    return init_lico_adva_crud({
      columns: [{
          label: '<%= t(:'adva.common.title') %>',
          name: 'title',
          type: 'string',
          submit_value: 'article[title]'
        }, {
          label: '<%= t(:'adva.common.date') %>',
          name: 'created_at', 
          type: 'date',
          submit_value: 'article[updated_at]'
        }, {
          label: '<%= t(:'adva.common.author') %>',
          name: 'author',
          type: 'combo',
          submit_value: 'article[author_id]',
          combo: {
            value: 'author_id',
            label: 'name',
            store: author_store
          }
        }, {
          label: '<%= t(:'adva.common.draft') %>',
          name: 'draft',
          type: 'boolean'
        }, {
          label: '<%= t(:'adva.titles.fixed_top') %>',
          name: 'fixed_top',
          type: 'boolean'
      }],
      add_record_path: '<%= admin_articles_path(@site, @section) %>',
      add_record_post: [{
        key: "article[body]",
        value: "&nbsp;"
      },{
        key: "article[updated_at]",
        value: ""
      }],
      store: {
        url: '<%= url_for admin_articles_url(@site, @section) %>.xml',
        sort: {
          by: 'created_at',
          order: 'asc'
        }
      },
      grid: {
        empty_details: '<%= t(:'adva.grid.articles') %>'
      },
      show: {
        url: '<%= edit_admin_article_path(@site, @section, '!recordid!') %>',
        custom_form: edit_article_form,
        custom_form_values: edit_article_form_values
      },
      edit: {
        url: '<%= admin_article_path(@site, @section, '!recordid!') %>',
        custom_actions: function(doc) {
          var id = xmlvalue(doc,"id");
          var draft = xmlvalue(doc,"draft");
          if (draft=="1") {
            return [{
                text: '<%= t(:'adva.common.preview') %>',
                iconCls: 'silk-world',
                handler: function(btn, ev) {
                  window.open('<%= admin_article_path(@site, @section, '!recordid!') %>'.replace(/!recordid!/, xmlvalue(selected_record,"id")));
                }
              }, {
                text: '<%= t(:'adva.common.publish') %>',
                iconCls: 'silk-accept',
                handler: function(btn, ev) {
                    if (grid.getSelectionModel().hasSelection()) {
                        var cell = grid.getSelectionModel().getSelected();

                      	Ext.Msg.show({
                      		id: 'publish-confirm',
                      		title: t['article']['publish']['title'],
                      		msg: t['article']['publish']['confirm'],
                      		buttons: {
                      			ok: t['article']['publish']['ok'],
                      			cancel: t['cancel_text']
                      		},
                      		icon: Ext.MessageBox.QUESTION,
                      		fn: function(btn) {
                      			if (btn == "ok") {
                              d = new Date();
                      			  set_publicatie(d.getDate()+"-"+(d.getMonth()+1)+"-"+d.getFullYear());
                      			}
                      		}
                      	});
                    }
                },
                scope: this
              }]
          } else {
            return [{
                text: 'Publicatie intrekken',
                iconCls: 'silk-delete',
                handler: function(btn, ev) {
                    if (grid.getSelectionModel().hasSelection()) {
                        var cell = grid.getSelectionModel().getSelected();

                      	Ext.Msg.show({
                      		id: 'publish-confirm',
                      		title: t['article']['publish_revoke']['title'],
                      		msg: t['article']['publish_revoke']['confirm'],
                      		buttons: {
                      			ok: t['article']['publish_revoke']['ok'],
                      			cancel: t['cancel_text']
                      		},
                      		icon: Ext.MessageBox.QUESTION,
                      		fn: function(btn) {
                      			if (btn == "ok") {
                      			  set_publicatie("");
                      			}
                      		}
                      	});
                    }
                },
                scope: this
              }]
          }
        }
      },
      destroy: {
        url: '<%= admin_article_path(@site, @section, '!recordid!') %>',
        message: "Wil je het geselecteerde artikel echt verwijderen?<br /><br />Het verwijderen kan niet ongedaan gemaakt worden."
      }
    });
  }
  
  function set_publicatie (published_at) {
    var mask = new Ext.LoadMask(Ext.getBody(), {
        msg: t['loader_text']
    });
    mask.show();

    var cell = grid.getSelectionModel().getSelected();
    var id = cell.id;

    //
    // Parameters submit verzamelen op basis
    // van submit_value in options
    //
    var parameters = {
        authenticity_token: window._auth_token,
        _method: 'put',
        "article[published_at]": published_at
    }

    parameters = crud_options.show["custom_form_values"](parameters),

    $.post(crud_options.edit.url.replace(/\!recordid\!/, id), parameters,
    function(responseText) {
        article_add_mode = false;
        responseText = responseText.replace(/[\r\n]/g, "").replace(/.*?(<div class="errorExplanation".*?<\/div>).*/, "$1");
        if (/errorExplanation/.test(responseText)) {
            //
            // Submit mislukt
            //
            mask.hide();
            Ext.Msg.show({
                title: t['error_title'],
                msg: responseText,
                buttons: {
                    ok: t['ok_text']
                },
                icon: Ext.MessageBox.WARNING
            });
        } else {
            //
            // Submit gelukt
            //
            if (typeof(post_submit) != "undefined") {
                post_submit("edit",
                function() {
                    document.getElementById('crud_detail').innerHTML = empty_crud_detail;
                    crud_panel.setSize("99%", "99%");
                    crud_panel.setSize("100%", "100%");
                    selected_record = null;
                    grid.getSelectionModel().clearSelections();
                    store.reload({
                        callback: function() {
                            mask.hide();
                        }
                    });
                });
            } else {
                document.getElementById('crud_detail').innerHTML = empty_crud_detail;
                crud_panel.setSize("99%", "99%");
                crud_panel.setSize("100%", "100%");
                selected_record = null;
                grid.getSelectionModel().clearSelections();
                store.reload({
                    callback: function() {
                        mask.hide();
                    }
                });
            }
        }
    });
  }
  
  function edit_article_form_values (parameters) {
    parameters["article[title]"] = document.getElementById('record_title').value;
    if (document.getElementById('record_author_id').value!="") {
      parameters["article[author_id]"] = document.getElementById('record_author_id').value;
    }
    parameters["article[updated_at]"] = xmlvalue(selected_record,"date");
    parameters["article[excerpt]"] = document.getElementById('record_excerpt').value;
    if (document.getElementById('record_body')) {
      parameters["article[body]"] = document.getElementById('record_body').value;
    }
    if (document.getElementById('record_permalink')) {
      parameters["article[permalink]"] = document.getElementById('record_permalink').value;
      parameters["article[tag_list]"] = document.getElementById('record_tag_list').value;
      parameters["article[published_at]"] = document.getElementById('record_published_at').value;
    }
    if (document.getElementById('record_meta_keywords')) {
      parameters["article[meta_keywords]"] = document.getElementById('record_meta_keywords').value;
      parameters["article[meta_description]"] = document.getElementById('meta_description').value;
      parameters["article[meta_author]"] = document.getElementById('record_meta_author').value;
      parameters["article[meta_copyright]"] = document.getElementById('record_meta_copyright').value;
      parameters["article[meta_geourl]"] = document.getElementById('record_meta_geourl').value;
    }
    if (document.getElementById("fixed_top")) {
      parameters["article[position]"] = document.getElementById("fixed_top").checked ? -1 : 0;
    }
    
    parameters["save_revision"] = "Save";
    //parameters["cl"] = "en";
    
    if (document.getElementById("categories_select")) {
      var selected_categories = [""];
      var items = document.getElementById("categories_select").getElementsByTagName("input");
      for (var c=0; c<items.length; c++) {
        if (items[c].checked) {
          selected_categories[selected_categories.length] = items[c].id.replace(/category_/,"");
        }
      }
    
      parameters["article[category_ids][]"] = selected_categories;
    }
  	return parameters;
  }
  
  var asset_mutations;
  var asset_mutations_index;
  var after_asset_mutation_store;
  var after_asset_mutation_callback;
  function post_submit (action, callback) {
    asset_mutations = [];
    asset_mutations_index = 0;
    after_asset_mutation_store = store;
    after_asset_mutation_callback = callback;
    
    if (selected_record && action=="edit") {
      var container = document.getElementById("asset-drop-zone");
      if (container) {
        //
        // Assets:
        //
      
        //
        // Toevoegen
        //
        var divs = container.getElementsByTagName("div");
        for (var c=0; c<divs.length; c++) {
          if (/thumb-wrap/.test(divs[c].className) && /asset_/.test(divs[c].id)) {
            var new_asset = true;
            var assetid = divs[c].id.replace(/\D/g,"");
            
            var current_assets = selected_record.getElementsByTagName("asset");
            for (var d=0; d<current_assets.length; d++) {
              if (xmlvalue(current_assets[d],"id") == assetid) {
                new_asset = false;
              }
            }
            
            if (new_asset) {
              asset_mutations[asset_mutations.length] = "add " + assetid;
            }
  		    }
        }
      
        //
        // Verwijderen
        //
        $.each(
          selected_record.getElementsByTagName("asset"),
          function (index, element) {
            var keep_asset = false;

            var divs = container.getElementsByTagName("div");
            for (var c=0; c<divs.length; c++) {
              if (/thumb-wrap/.test(divs[c].className) && divs[c].id == "asset_" + xmlvalue(element,"id")) {
      		      keep_asset = true;
      		    }
            }
            
            if (!keep_asset) {
              asset_mutations[asset_mutations.length] = "destroy " + xmlvalue(element,"id");
            }
          }
        );
      }
    }
    
    if (asset_mutations.length > 0) {
      next_asset_mutation();
    } else {
      callback();
  	}
  }
  
  function next_asset_mutation () {
    if (asset_mutations_index < asset_mutations.length) {
      var am = asset_mutations[asset_mutations_index];
      var id = am.replace(/\D/g,"");
      
      if (/add /.test(am)) {
        var parameters = {
         authenticity_token: window._auth_token,
         content_id: xmlvalue(selected_record,"id")
        }
        var url = '<%= admin_asset_contents_path(@site, '!recordid!') %>'.replace("!recordid!", id);

        $.post(url, parameters, function(responseText) {
          asset_mutations_index ++;
          next_asset_mutation();
        });
      } else if (/destroy /.test(am)) {
        var parameters = {
         authenticity_token: window._auth_token,
         _method: 'delete'
        }
        var url = '<%= admin_asset_content_path(@site, '!recordid!', '!contentid!') %>'.replace("!contentid!", xmlvalue(selected_record,"id")).replace("!recordid!", id);
        $.post(url, parameters, function(responseText) {
          asset_mutations_index ++;
          next_asset_mutation();
        });
      }
    } else {
      after_asset_mutation_store.reload({
        callback: after_asset_mutation_callback
      });
    }
  }
  
  var item_assets;
  function edit_article_form (record) {
    var title = xmlvalue(record,"title");
    var date = xmlvalue(record,"date");
    var author = xmlvalue(record,"author");
    var category = xmlvalue(record,"category");
    var excerpt = xmlvalue(record,"excerpt");
    var body = xmlvalue(record,"body");
    var draft = xmlvalue(record,"draft");
    var fixed_top = xmlvalue(record,"fixed_top");

    selected_record_title = title;

    var meta = record.getElementsByTagName("meta")[0];
    var meta_keywords = xmlvalue(meta,"keywords");
    var meta_description = xmlvalue(meta,"description");
    var meta_author = xmlvalue(meta,"author");
    var meta_copyright = xmlvalue(meta,"copyright");
    var meta_geourl = xmlvalue(meta,"geourl");

    var options = record.getElementsByTagName("options")[0];
    var permalink = xmlvalue(options,"permalink");
    var tag_list = xmlvalue(options,"tag_list");
    var filter = xmlvalue(options,"filter");
		var published_at = xmlvalue(options,"published_at");
    
    //
    // Vast variabele aanmaken met
    // alle afbeeldingen-id's
    //
    item_assets = [];
    $.each(
      record.getElementsByTagName("asset"),
      function (index, element) {
        item_assets[item_assets.length] = {
          border: false,
          baseCls: 'x-plain-panel',
          html: '<div class="thumb-wrap" id="asset_' + xmlvalue(element,"id") + '">' +
          '<div class="thumb thumb_for_'+ xmlvalue(element,"css_class") + '"><span class="'+ xmlvalue(element,"css_class") + '"></span><img src="' + xmlvalue(element,"thumb_url") + '" class="thumb-img"></div>' +
          '<span>' + xmlvalue(element,"title") + '</span><div class="toolbox"><img src="/stylesheets/extjs/fam/delete.gif" title="Verwijderen" onclick="asset_delete(this);" /></div>'
        };
      }
    );
    
    var categories_select = "";
    var current_categories = record.getElementsByTagName("category");
    <% @section.categories.each do |category| %>
      var selected = false;
      for (var c=0; c<current_categories.length; c++) {
        if (xmlvalue(current_categories[c],"id") == "<%= category.id.to_s %>") {
          selected = true;
        }
      }
      categories_select += "<div><input " + (selected ? 'checked="checked" ':"") + "type='checkbox' name='category_<%= category.id.to_s %>' id='category_<%= category.id.to_s %>' /><label for='category_<%= category.id.to_s %>'><%= h category.title %></label>";
    <% end %>

  	return [{
	    layout: 'column',
	    border: false,
	    items: [{
        columnWidth: .5,
        layout: 'form',
        border: false,
        items: [{
          xtype: 'textfield',
          fieldLabel: '<%= t(:'adva.common.title') %>',
          id: 'record_title',
          name: 'title',
          anchor: '95%',
          value: title
        }]
  	  },{
  	    columnWidth: .5,
  	    layout: 'form',
        border: false,
        items: [{
          xtype: 'combo',
          fieldLabel: '<%= t(:'adva.common.edited_by') %>',
          name: 'author_id',
          anchor: '95%',
          value: author,
          store: author_store,
          valueField: 'author_id',
          displayField: 'name',
          mode: 'local',
          hiddenName: 'record_author_id',
          hiddenId: 'record_author_id'
        }]
  	  }]
  	},{
	    xtype: 'tabpanel',
	    plain: true,
	    activeTab: 0,
	    height: 195,
	    defaults: {
	        bodyStyle: 'padding:10px'
	    },
	    items: [{
        cls: 'x-plain',
        title: '<%= t(:'adva.titles.introduction') %>',
        layout: 'fit',
        items: {
            xtype: 'htmleditor',
            id: 'record_excerpt',
            name: 'excerpt',
            value: excerpt,
            plugins: [
              new Ext.ux.form.HtmlEditor.Image(),  
            ]
        }
	    },{
        cls: 'x-plain',
        title: '<%= t(:'adva.titles.article_full') %>',
        layout: 'fit',
        items: {
            xtype: 'htmleditor',
            id: 'record_body',
            name: 'body',
            value: 'test',
            value: body,
            plugins: [
              new Ext.ux.form.HtmlEditor.Image(),  
            ]
        }
	    },{
        title: <%= t(:'adva.titles.assets').to_json %>,
        bodyStyle: 'padding: 0px;',
        layout: 'anchor',
        items: [{
          border: false,
          baseCls: 'x-plain',
	        bodyStyle: 'padding: 5px',
          html: t['assets']['drop-zone'],
          height: 25
        },{
          id: 'asset-drop-zone',
          border: false,
          baseCls: 'x-plain',
          bodyStyle: 'padding: 5px',
          anchor: '100%, -25',

          animate:true,
          enableDD:true,
          containerScroll: true,
          ddGroup: 'organizerDD',
          
          items: item_assets,
          
          listeners: {
            afterrender: function(el) {
              new Ext.dd.DropTarget(el.body.dom, {
            		ddGroup     : 'organizerDD',
            		notifyDrop  : function(ddSource, e, data){
            		  var target = document.getElementById("asset-drop-zone").getElementsByTagName("div")[1];
            		  var current_assets = target.getElementsByTagName("div");
            		  
            		  var items = data.ddel.getElementsByTagName("div");
            		  for (var i=0; i<items.length; i++) {
            		    var item = items[i];
            		    if (/thumb_for/.test(item.className)) {
            		      item = item.parentNode;
            		      var bestaat_al = false;
                		  for (var c=0; c<current_assets.length; c++) {
                		    if (/thumb-wrap/.test(current_assets[c].className) && current_assets[c].id == item.id) {
                		      bestaat_al = true;
                		    }
                		  }
                      if (!bestaat_al) {
                        var div = target.appendChild(document.createElement("div"));
                        div.innerHTML = item.innerHTML + '<div class="toolbox"><img src="/stylesheets/extjs/fam/delete.gif" title="Verwijderen" onclick="asset_delete(this);" />';
                        div.id = item.id;
                        div.className = item.className;
                      }
            		    }
            		  }
            			return(true);
            		}
            	});
            }
          }
        }]
	    },{
        cls: 'x-plain',
        title: '<%= t(:'adva.titles.categories') %>',
        layout: 'fit',
        items: {
            id: 'categories_select',
            border: false,
            html: categories_select
        }
			},{
				title: '<%= t(:'adva.common.options') %>',
				layout: 'column',
				border: false,
				items: [{
					columnWidth: .5,
					layout: 'form',
					border: false,
					items: [{
						fieldLabel: '<%= t(:'adva.titles.permalink') %>',
						name: 'permalink',
						value: '',
						id: 'record_permalink',
						value: permalink,
						xtype: 'textfield',
						anchor: '95%'
					},{
						fieldLabel: '<%= t(:'adva.titles.tag_list') %>Tag list',
						name: 'tag_list',
						id: 'record_tag_list',
						value: tag_list,
						xtype: 'textfield',
						anchor: '95%'
					},{
						xtype: 'checkbox',
						fieldLabel: '<%= t(:'adva.titles.fixed_top') %>',
						id: 'fixed_top',
						name: 'fixed_top',
						anchor: '95%',
						checked: fixed_top == "1",
						mode: 'local'
					}]
				},{
					columnWidth: .5,
					layout: 'form',
					border: false,
					items: [{
						xtype: 'xdatetime',
						dateFormat: "d-m-Y",
						timeFormat: "H:i",
						fieldLabel: '<%= t(:'adva.common.publish_date') %>',
						id: 'record_published_at',
						name: 'published_at',
						anchor: '95%',
						value: published_at
					}]
				}]
			},{
        title: '<%= t(:'adva.titles.meta_tags') %>',
        layout: 'column',
        border: false,
        items: [{
          columnWidth: .5,
          layout: 'form',
          border: false,
          items: [{
            xtype: 'textfield',
            fieldLabel: '<%= t(:'adva.titles.keywords') %>',
            id: 'record_meta_keywords',
            name: 'meta_keywords',
            anchor: '95%',
            value: meta_keywords
          },{
            xtype: 'textarea',
            fieldLabel: '<%= t(:'adva.titles.description') %>',
            id: 'meta_description',
            name: 'record_meta_description',
            anchor: '95%',
            value: meta_description
          }]
	      },{
          columnWidth: .5,
          layout: 'form',
          border: false,
          items: [{
            xtype: 'textfield',
            fieldLabel: '<%= t(:'adva.common.author') %>',
            name: 'meta_author',
            id: 'record_meta_author',
            anchor: '95%',
            value: meta_author
          },{
            xtype: 'textfield',
            fieldLabel: '<%= t(:'adva.titles.copyright') %>',
            name: 'meta_copyright',
            id: 'record_meta_copyright',
            anchor: '95%',
            value: meta_copyright
          },{
            xtype: 'textfield',
            fieldLabel: '<%= t(:'adva.titles.geourl') %>',
            name: 'meta_geourl',
            id: 'record_meta_geourl',
            anchor: '95%',
            value: meta_geourl
          }]
	      }]
	    }]
  	}];
  }
</script>
<%= render :partial => "single_edit_create_data" %>