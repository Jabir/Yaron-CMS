<%= render :partial => "/admin/assets/sidebar", :locals => { :use_dnd => true, :only_movies => true, :site => @site } %>
<script type="text/javascript" charset="utf-8">
  // function modify_main_menu(menu) {
  //   return [];
  // }
  
  //
  // Init CRUD
  //
  function extjs_body_items() {
    return init_lico_adva_crud({
      columns: [{
          label: 'Titel',
          name: 'title',
          type: 'string',
          submit_value: 'playlist[title]'
      }],
      store: {
        url: '<%= url_for admin_playlists_url(@site) %>.xml',
        sort: {
          by: 'title',
          order: 'asc'
        }
      },
      grid: {
        empty_details: 'Selecteer een playlist voor details.'
      },
      show: {
        url: '<%= edit_admin_playlist_path(@site, '!recordid!') %>',
        custom_form: edit_playlist_form,
        custom_form_values: edit_playlist_form_values
      },
      edit: {
        url: '<%= admin_playlist_path(@site, '!recordid!') %>'
      }
    });
  }
  
  function edit_playlist_form_values (parameters) {
    var container = document.getElementById("asset-drop-zone");
    var divs = container.getElementsByTagName("div");
    parameters["assets[]"] = [];
    for (var c=0; c<divs.length; c++) {
      if (/thumb-wrap/.test(divs[c].className) && /asset_/.test(divs[c].id)) {
        var assetid = divs[c].id.replace(/\D/g,"");
        parameters["assets[]"][parameters["assets[]"].length] = assetid;
	    }
    }

  	return parameters;
  }
  
  function edit_playlist_form (record) {
    item_assets = [];
    $.each(
      record.getElementsByTagName("asset"),
      function (index, element) {
        item_assets[item_assets.length] = {
          border: false,
          baseCls: 'x-plain-panel',
          html: '<div class="thumb-wrap" id="asset_' + xmlvalue(element,"id") + '">' +
          '<div class="thumb"><span class="'+ xmlvalue(element,"css_class") + '"></span><img src="' + xmlvalue(element,"thumb_url") + '" class="thumb-img"></div>' +
          '<span>' + xmlvalue(element,"title") + '</span><div class="toolbox"><img src="/stylesheets/extjs/fam/delete.gif" title="Verwijderen" onclick="asset_delete(this);" /></div>'
        };
      }
    );

  	return [{
      border: false,
      bodyStyle: 'padding: 0px;',
      layout: 'anchor',
      items: [{
        border: false,
        baseCls: 'x-plain',
        bodyStyle: 'padding: 5px',
        html: t['assets']['drop-zone'],
        height: 25
      },{
        id: 'asset-drop-zone',
        border: false,
        baseCls: 'x-plain',
        bodyStyle: 'padding: 5px',
        height: 120,
        anchor: '100%, -25',

        animate:true,
        enableDD:true,
        containerScroll: true,
        ddGroup: 'organizerDD',

        items: item_assets,

        listeners: {
          afterrender: function(el) {
            new Ext.dd.DropTarget(el.body.dom, {
          		ddGroup     : 'organizerDD',
          		notifyDrop  : function(ddSource, e, data){
          		  var target = document.getElementById("asset-drop-zone").getElementsByTagName("div")[1];
          		  var current_assets = target.getElementsByTagName("div");
          		  
          		  var items = data.ddel.getElementsByTagName("div");
          		  for (var i=0; i<items.length; i++) {
          		    var item = items[i];
          		    if (item.className == "thumb") {
          		      item = item.parentNode;
          		      var bestaat_al = false;
              		  for (var c=0; c<current_assets.length; c++) {
              		    if (/thumb-wrap/.test(current_assets[c].className) && current_assets[c].id == item.id) {
              		      bestaat_al = true;
              		    }
              		  }
                    if (!bestaat_al) {
                      var div = target.appendChild(document.createElement("div"));
                      div.innerHTML = item.innerHTML + '<div class="toolbox"><img src="/stylesheets/extjs/fam/delete.gif" title="Verwijderen" onclick="asset_delete(this);" />';
                      div.id = item.id;
                      div.className = item.className;
                    }
          		    }
          		  }
          			return(true);
          		}
          	});
          }
        }
      }]
    }];
  }

  function asset_delete (ref) {
    var asset = ref.parentNode.parentNode;
    asset.parentNode.removeChild(asset);
  }

  function extjs_sidebar_items () {
    return sidebar_drag_view();
  }
  
  ImageDragZone = function(view, config){
      this.view = view;
      ImageDragZone.superclass.constructor.call(this, view.getEl(), config);
  };
  Ext.extend(ImageDragZone, Ext.dd.DragZone, {
      // We don't want to register our image elements, so let's 
      // override the default registry lookup to fetch the image 
      // from the event instead
      getDragData : function(e){
          var target = e.getTarget('.thumb-wrap');
          if (target){
              var view = this.view;
              if (!view.isSelected(target)){
                  view.onClick(e);
              }
              var selNodes = view.getSelectedNodes();
              var dragData = {
                  nodes: selNodes
              };
              if (selNodes.length == 1){
                  dragData.ddel = target;
                  dragData.single = true;
              } else {
                  var div = document.createElement('div'); // create the multi element drag "ghost"
                  div.className = 'multi-proxy';
                  for(var i = 0, len = selNodes.length; i < len; i++){
                      div.appendChild(selNodes[i].cloneNode(true)); // image nodes only
                      if((i+1) % 3 == 0){
                          div.appendChild(document.createElement('br'));
                      }
                  }
                  var count = document.createElement('div'); // selected image count
                  count.innerHTML = i + ' images selected';
                  div.appendChild(count);

                  dragData.ddel = div;
                  dragData.multi = true;
              }
              return dragData;
          }
          return false;
      },

      // the default action is to "highlight" after a bad drop
      // but since an image can't be highlighted, let's frame it 
      afterRepair:function(){
          for(var i = 0, len = this.dragData.nodes.length; i < len; i++){
              Ext.fly(this.dragData.nodes[i]).frame('#8db2e3', 1);
          }
          this.dragging = false;    
      },

      // override the default repairXY with one offset for the margins and padding
      getRepairXY : function(e){
          if(!this.dragData.multi){
              var xy = Ext.Element.fly(this.dragData.ddel).getXY();
              xy[0]+=3;xy[1]+=3;
              return xy;
          }
          return false;
      }
  });
  Ext.DataView.DragSelector = function(cfg){
      cfg = cfg || {};
      var view, proxy, tracker;
      var rs, bodyRegion, dragRegion = new Ext.lib.Region(0,0,0,0);
      var dragSafe = cfg.dragSafe === true;

      this.init = function(dataView){
          view = dataView;
          view.on('render', onRender);
      };

      function fillRegions(){
          rs = [];
          view.all.each(function(el){
              rs[rs.length] = el.getRegion();
          });
          bodyRegion = view.el.getRegion();
      }

      function cancelClick(){
          return false;
      }

      function onBeforeStart(e){
          return !dragSafe || e.target == view.el.dom;
      }

      function onStart(e){
          view.on('containerclick', cancelClick, view, {single:true});
          if(!proxy){
              proxy = view.el.createChild({cls:'x-view-selector'});
          }else{
              if(proxy.dom.parentNode !== view.el.dom){
                  view.el.dom.appendChild(proxy.dom);
              }
              proxy.setDisplayed('block');
          }
          fillRegions();
          view.clearSelections();
      }

      function onDrag(e){
          var startXY = tracker.startXY;
          var xy = tracker.getXY();

          var x = Math.min(startXY[0], xy[0]);
          var y = Math.min(startXY[1], xy[1]);
          var w = Math.abs(startXY[0] - xy[0]);
          var h = Math.abs(startXY[1] - xy[1]);

          dragRegion.left = x;
          dragRegion.top = y;
          dragRegion.right = x+w;
          dragRegion.bottom = y+h;

          dragRegion.constrainTo(bodyRegion);
          proxy.setRegion(dragRegion);

          for(var i = 0, len = rs.length; i < len; i++){
              var r = rs[i], sel = dragRegion.intersect(r);
              if(sel && !r.selected){
                  r.selected = true;
                  view.select(i, true);
              }else if(!sel && r.selected){
                  r.selected = false;
                  view.deselect(i);
              }
          }
      }

      function onEnd(e){
          if (!Ext.isIE) {
              view.un('containerclick', cancelClick, view);    
          }        
          if(proxy){
              proxy.setDisplayed(false);
          }
      }

      function onRender(view){
          tracker = new Ext.dd.DragTracker({
              onBeforeStart: onBeforeStart,
              onStart: onStart,
              onDrag: onDrag,
              onEnd: onEnd
          });
          tracker.initEl(view.el);
      }
  };
  Ext.onReady(function(){
    var dragZone = new ImageDragZone(sidebar_drag_assets(), { containerScroll:true, ddGroup: 'organizerDD'});
  });
</script>
<% content_for :sidebar do -%>
<% end -%>
